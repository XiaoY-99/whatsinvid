from PIL import Image, ImageDraw, ImageFont
import textwrap
import os

from visual_tagger import get_visual_concepts


def generate_poster(summary: str, output_path: str) -> str:
    """
    Create a PNG poster with dynamic visuals and clean formatting.

    Args:
        summary (str): Translated summary text.
        output_path (str): Path to save the poster image.

    Returns:
        str: Path to the poster image.
    """
    width = 800
    margin = 50
    spacing = 35
    background_color = (255, 255, 255)
    text_color = (40, 40, 40)
    title_color = (0, 102, 204)
    subtitle_color = (120, 120, 120)

    # Load fonts
    try:
        font_dir = os.path.join(os.path.dirname(__file__), "fonts", "dejavu-fonts-ttf-2.37", "ttf")
        title_font_path = os.path.join(font_dir, "DejaVuSans-Bold.ttf")
        body_font_path = os.path.join(os.path.dirname(__file__), "fonts", "NotoSansCJK-Regular.ttc")

        title_font = ImageFont.truetype(title_font_path, size=44)
        subtitle_font = ImageFont.truetype(body_font_path, size=22)
        body_font = ImageFont.truetype(body_font_path, size=26)
    except Exception as e:
        print(f"[ERROR] Failed to load custom fonts: {e}")
        title_font = subtitle_font = body_font = ImageFont.load_default()

    # Wrap and measure text
    wrapped_summary = textwrap.wrap(summary.strip(), width=45)

    dummy_img = Image.new("RGB", (width, 1000))
    draw_dummy = ImageDraw.Draw(dummy_img)

    text_height = sum(
        (draw_dummy.textbbox((0, 0), line, font=body_font)[3] - draw_dummy.textbbox((0, 0), line, font=body_font)[1]) + 10
        for line in wrapped_summary
    )

    title_text = "Video Summary"
    subtitle_text = "Generated by WhatsInVid"

    title_bbox = draw_dummy.textbbox((0, 0), title_text, font=title_font)
    subtitle_bbox = draw_dummy.textbbox((0, 0), subtitle_text, font=subtitle_font)

    title_h = title_bbox[3] - title_bbox[1]
    subtitle_h = subtitle_bbox[3] - subtitle_bbox[1]

    total_height = margin + title_h + 10 + subtitle_h + spacing + text_height + margin

    # Create final image
    img = Image.new("RGB", (width, total_height), color=background_color)
    draw = ImageDraw.Draw(img)

    # Draw title and subtitle
    draw.text((margin, margin), title_text, fill=title_color, font=title_font)
    draw.text((margin, margin + title_h + 10), subtitle_text, fill=subtitle_color, font=subtitle_font)

    # Draw summary
    y = margin + title_h + 10 + subtitle_h + spacing
    for line in wrapped_summary:
        draw.text((margin, y), line, fill=text_color, font=body_font)
        line_bbox = draw.textbbox((0, 0), line, font=body_font)
        line_h = line_bbox[3] - line_bbox[1]
        y += line_h + 10

    # Get GPT-based visual concept suggestions
    concepts = get_visual_concepts(summary)
    print(f"[INFO] Suggested visual tags: {concepts}")

    # Try to add an icon for each concept (up to 2)
    image_dir = os.path.join(os.path.dirname(__file__), "images")
    icon_x = width - 140  # align right
    icon_y = margin

    used_icons = 0
    max_icons = 4
    icon_x = width - 140
    icon_y = margin

    for concept in concepts:
        icon_file = f"{concept.lower().replace(' ', '_')}.png"
        icon_path = os.path.join(image_dir, icon_file)

        if os.path.exists(icon_path):
            try:
                icon = Image.open(icon_path).convert("RGBA")
                icon.thumbnail((100, 100))
                img.paste(icon, (icon_x, icon_y), icon)
                icon_y += icon.height + 20
                used_icons += 1
                print(f"[INFO] Added icon: {icon_file}")
                if used_icons >= max_icons:
                    break
            except Exception as e:
                print(f"[WARNING] Failed to add icon '{icon_file}': {e}")
        else:
            print(f"[INFO] No icon found for: {concept}")

    # Fallback: Add default and general if no icons were added
    if used_icons == 0:
        for fallback in ["default.png", "general.png"]:
            fallback_path = os.path.join(image_dir, fallback)
            if os.path.exists(fallback_path):
                try:
                    icon = Image.open(fallback_path).convert("RGBA")
                    icon.thumbnail((100, 100))
                    img.paste(icon, (icon_x, icon_y), icon)
                    icon_y += icon.height + 20
                    print(f"[INFO] Added fallback icon: {fallback}")
                except Exception as e:
                    print(f"[WARNING] Failed to add fallback icon '{fallback}': {e}")
            else:
                print(f"[INFO] Fallback icon missing: {fallback}")

    img.save(output_path)
    print(f"[INFO] Poster saved to {output_path}")
    return output_path
